# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
variables:
   MAVEN_CLI_OPTS: >-
      --batch-mode
      --errors
      --fail-at-end
      --show-version
      --no-transfer-progress

# run with docker, choose maven 3.9.0 with latest Java and a small linux footprint
image: maven:3.9.0-eclipse-temurin-19-alpine

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

stages:
  - build
  - deploy
  - site



build-job:
  stage: build
  script:
    - mvn $MAVEN_CLI_OPTS package
  coverage: '/Total.*?([0-9]{1,3})%/'
  artifacts:
    when: always
    reports:
      junit: target/surefire-reports/TEST-*.xml
    paths:
      - target
      - target/surefire-reports/TEST-*.xml

# Build Docker image
build-docker-job:
  stage: build
  image: docker:latest
  variables:
    DOCKER_IMAGE_TAG: "$CI_REGISTRY_IMAGE/frontend:latest"
  services: # To obtain a Docker daemon, request a Docker-in-Docker service
    - docker:dind
  script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --pull -t $DOCKER_IMAGE_TAG .
    - docker push $DOCKER_IMAGE_TAG
  only:
    - main

deploy-job:
    stage: deploy
    script:
        - echo "running deployment"
        - ./.gitlab-ci/deploy.sh
    only:
        - main

pages:
  stage: site
  script:
    - mvn site
    - mv target/site public
  rules:
  - when: always
  artifacts:
    paths:
    - public
